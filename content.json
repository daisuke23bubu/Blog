{"pages":[],"posts":[{"title":"【About ME】自己紹介","text":"なにしてる人？ 修士１年（2022年4月現在） 情報工学専攻（コンピュータサイエンス！） クラウドコンピューティングを研究 京都の大学に通う大学院生です！2022年4月現在修士1年生です。専攻は情報です！ネットワークの研究室所でクラウドの勉強をしてます。 趣味 アウトドア バイク ダイビング キャンプ インドア PCゲーム（FPSやRPG） プログラミング（Railsでwebサービスを作ったり！） 特技圧倒的に水泳です！（笑）というのも小中高と地元のスイミングスクールの選手コースでバリバリに泳いでました！水泳歴は20年くらいでしょうか？ なんのブログ？自分のためのブログです（笑）今年は修士1年生になり、もっとコンピュータのことを学びたい！人に教えられるくらい知りたい！という思いがフツフツと湧き上がっております（笑）そんな私の学習録・備忘録です！ アルバイト歴大学4年間はスイミングスクールを２つ掛け持ちしていました。特技の「水泳」からわかるように、水泳漬けの人生でした。その経験もあってスイミングスクールでコーチをしていました。掛け持ちしている一方では選手コースで指導をして、他方では子供や成人の方に泳ぎ方を教えていました。","link":"/Blog/2022/04/20/About-ME/"},{"title":"【Ruby】Ruby文法","text":"インターンでRubyを使うので基本的なコマンドの復習 Rubyファイルの実行1ruby {ファイル名} 標準出力12puts &quot;hoge&quot;puts hoge 変数定義型宣言は不要 1name = 'hoge' 文字列12345678name = 'hoge'name = &quot;hoge&quot;&quot;&quot;(ダブルクォートでは式が展開できる)name = 'hoge'puts 'hello #{name}'&gt; hello #{name}puts &quot;hello #{name}&quot;&gt; hello hoge 数値1234整数number = 1少数number = 1.0 型変換12345678puts &quot;3&quot; + 4&gt; TypeErrorputs &quot;3&quot;.to_i + 4&gt; 7to_ito_fto_s 配列123456animals = [&quot;dog&quot;, &quot;cat&quot;]puts animals[1]&gt; catanimals.push(&quot;mouse&quot;)animals &lt;&lt; &quot;pig&quot; ハッシュ123456colors = {green: &quot;緑&quot;, red: &quot;赤&quot;}puts colors[:green]&gt; 緑colors[:blue] = &quot;青&quot;colors.delete(:red) ループ1234567891011121314#while文while x &gt;= 1 puts x x = x -1end#for文for i in 1..4 do puts iendanimals.each do |animal| puts animalend 条件分岐1234567891011121314#if文x = 4if x == 0 puts 'zero'elsif x%2 == 0 puts 'even'end#unlessunless x == 0 puts 'non zero'else puts 'zero'end 命名規則12345678#クラス，モジュールUpperCamelCase#メソッド，変数snake_case#定数SNAKE_WITH_UPPERCASE","link":"/Blog/2022/04/25/Ruby-Command/"},{"title":"【Linux】Linuxコマンド","text":"pwd カレントディレクトリのルートディレクトリからのパスが出力 pwd ls カレントディレクトリ配下のファイルやディレクトリを確認 ls 隠しファイル，隠しディレクトリも含める表示 ls -a cd ディレクトリ移動 cd ｛ディレクトリのパス｝ ホームディレクトリへ移動` cd cat ファイルの中身が出力 cat {ファイル名} touch ファイルの作成 touch ｛ファイル名｝ ディレクトリ作成 mkdir ｛ディレクトリ名｝ rm ファイルの削除 rm ｛ファイル名｝ ディレクトリ内を再帰的に削除（ディレクトリごと削除） rm -r {ディレクトリ名}","link":"/Blog/2022/04/24/linux-command/"},{"title":"【メモ】パターン認識","text":"パターン認識観測されたパターンを複数のクラスのうちのどのクラスか決める処理のこと！ここで クラス=概念 ということ． 識別辞書構成法起こりうる全てのパターンを記憶！（理想的な方法） 入力 前処理（ノイズ除去・正規化） 特徴抽出 識別部（識別辞書・識別演算） 出力 特徴抽出特徴は一般にベクトルで表す＝特徴ベクトル特徴ベクトルが張られる空間＝特徴空間 空間上の同一クラスのパターンの塊＝クラスタ どのクラスにも属さないパターンはrejectされる 全パターンそれぞれにクラスを割り振らなければならない-&gt;めちゃくちゃ時間かかる，非現実的起きる全てのパターンを記憶しておくのだから理想的な方法ではあるが，，，時間がかかりすぎて無理！ 最近傍決定則- NN法（nearest neighbor rule）ユークリッド距離を用いる特徴空間上で近いものは似てるでしょ！という仮定","link":"/Blog/2022/04/28/pattern-recognition/"},{"title":"【Ruby】Sinatra MVC","text":"Controllerルーティングを設定するところ！ 123456789#getは以下のような感じget '/' doend#postは以下のような感じpost '/' doend Viewserb = htmlにRubyを埋め込んだファイルerbファイルにhtmlやrubyを書くよ 12345&lt;% %&gt;&gt;結果は表示されない&lt;%= %&gt;&gt;結果が表示される 変数の受け渡しControllerからViewsへ変数の架け橋@がつく変数はインスタンス変数となるインスタンス変数は スコープがテンプレート内 リクエストごとにリクエストインスタンスが立つ FormとInputForm actionは送信先 methodはリクエストの種類Input typeは値の種類（テキストボックス，ラジオボタンなど) nameは値の名前12345678910#クライアント側（Views）&lt;form action=&quot;/create&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;#サーバ側（Controller）post '/create' do Item.create({ title = params[:title] price = params[:price] }) paramsはリクエストに入っている情報。つまりinput name=&quot;hoge&quot; と params[:hoge]のhogeの部分が一致していればformからControllerへ情報が送れる！","link":"/Blog/2022/04/30/Sinatra-MVC/"},{"title":"【進化的アルゴリズム】遺伝的アルゴリズムやってみた","text":"遺伝的アルゴリズムとは 個体それぞれが解であるということ 適応度はどれだけ優秀な解であるか 交叉や突然変異は直感的にわかりやすかった とても参考になったリンク集 遺伝的アルゴリズムとはそもそも遺伝的アルゴリズムとは？ 遺伝的アルゴリズムはデータ（解の候補）を遺伝子で表現した「個体」を複数用意し、適応度の高い個体を優先的に選択して交叉・突然変異などの操作を繰り返しながら解を探索する。適応度は適応度関数によって与えられる。 (wikipediaより) つまり生物が進化してきた仕組みをコンピュータ内でやってみよう！ということだと理解しました。 実際に遺伝的アルゴリズムを用いてフロイド問題を問いてみたので、考える中で詰まったポイントをメモしておきます。完全に自分用です！（笑） 個体それぞれが解であるということランダムに生成された遺伝子をもつ個体がそもそも何なのか？というところでつまずいた。個体は解であると理解しました。例えばフロイド問題を簡単にして1から10までの数を2つのグループAとグループBに分類してみる。各個体は10個の遺伝子を持っている。遺伝子は0か1どちらかの値を取る。0ならグループA、1ならグループBとする。ある個体が[0,1,0,1,0,1,1,1,0,0]のような遺伝子を持っている！これはグループA＝｛1,3,5,9,10｝でグループB＝｛2,4,6,7,8｝というように分けてみる！という解の1つというわけだな！がはは 適応度はどれだけ優秀な解であるか適応度は目的によってそれぞれだ。先程の簡単にしたフロイド問題の例ではグループAとグループBのそれぞれの合計が同じになってほしい！つまりabs|sum(グループA) - sum(グループB)|を小さくしたいわけです。そしてこの値こそが適応度！今回の例ではこの値が小さい個体のほうが優秀！というわけだな！がはは 交叉や突然変異は直感的にわかりやすかった遺伝子がなにを意味しているのか？適応度はなんなのか？というところを抑えると後はかなり直感的に理解できた。もし再び取り組むことがあれば、遺伝子は何を意味しているのか？適応度はなんなのか？を分かればその後は苦しむことは少ないと思う。未来の自分、、、がんばれ！ とても参考になったリンク集 遺伝的アルゴリズム・フロイド問題 【初心者向け】Re:ゼロから始める遺伝的アルゴリズム【人工知能】 GA（遺伝的アルゴリズム）をPythonで実装してみた 遺伝的アルゴリズムについてコードも交えて説明する","link":"/Blog/2022/05/18/Genetic-Algorithm/"},{"title":"【メモ】ロゴ＆デザイン","text":"配色 有名ブランドのロゴ フォント 配色デザインをしてみたいけど、なんせセンスがない・・・そんなひとにオススメなサイトがこちら！ Happy Hues - Curated colors in context.See color palette inspiration on a real example website. As you click on differe… なんとも絶妙な色の組み合わせがたくさん掲載されています。使っている色のコードと具体的なWEBページの例が乗っているので参考になりまくり！ 有名ブランドのロゴめちゃくちゃ有名なブランドのロゴをザーッと見られます！そもそもどんなふうにデザインしたらカッコイイんだ？とか有名なブランドロゴを真似することで技術力を高めたいと思う人にオススメなサイト！ The branding style guidelines documents archiveWelcome to the brand design manual documents directory. Search over our worldwid… フォントフォントといえば言わずとしれたGoogle Fontsなどがありますが・・・フォントをみてどれを使おうか決めるのは難しい。そんな人にオススメなサイト！有名ブランドのロゴとそのフォントが見られます。このブランドのフォントかっこいいなぁっていうものがあればここで探してみる！ Font In Logo - Search Engine for Logos and FontsSearch and find FONTS used by World Brands in their logo. Create your logo desig…","link":"/Blog/2022/05/19/logo-design/"},{"title":"【Ruby】Sinatra振り返り","text":"Rubyにおけるオブジェクト指向 サーバ・クライアントモデル Sinatraにおけるparams Sinatra DBにおけるdb:migrate Rubyにおけるオブジェクト指向 関連性のあるデータや処理をひとまとめにする＝オブジェクト オブジェクトが互いに通信してソフトウェアを構築するプログラミングパラダイム Rubyにおいては全てがオブジェクト サーバ・クライアントモデル サーバとクライアントがインターネットを通じて互いにやりとりすること Ex.Webアプリケーションサーバがサーバ，ブラウザがクライアント HTTP・HTTPSプロトコルが用いられる Sinatraにおけるparams ハッシュ URIのパラメーター、クエリ、ボディーのデータを保持 form 内の nameタグと対応してデータを保持 Sinatra DBにおけるdb:migrate DBに対する操作を記述 一度実行したら編集しても反映されない schema.rbには現在のDBの状態が表示","link":"/Blog/2022/05/15/Sinatra-review/"}],"tags":[{"name":"myself","slug":"myself","link":"/Blog/tags/myself/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/tags/Ruby/"},{"name":"Command","slug":"Command","link":"/Blog/tags/Command/"},{"name":"Linux","slug":"Linux","link":"/Blog/tags/Linux/"},{"name":"Sinatra","slug":"Sinatra","link":"/Blog/tags/Sinatra/"},{"name":"Algorithm","slug":"Algorithm","link":"/Blog/tags/Algorithm/"}],"categories":[{"name":"Other","slug":"Other","link":"/Blog/categories/Other/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/categories/Ruby/"},{"name":"Linux","slug":"Linux","link":"/Blog/categories/Linux/"},{"name":"Algorithm","slug":"Algorithm","link":"/Blog/categories/Algorithm/"}]}