{"pages":[],"posts":[{"title":"【アルゴリズム】遺伝的アルゴリズムやってみた","text":"遺伝的アルゴリズムとは 個体それぞれが解であるということ 適応度はどれだけ優秀な解であるか 交叉や突然変異は直感的にわかりやすかった とても参考になったリンク集 遺伝的アルゴリズムとはそもそも遺伝的アルゴリズムとは？ 遺伝的アルゴリズムはデータ（解の候補）を遺伝子で表現した「個体」を複数用意し、適応度の高い個体を優先的に選択して交叉・突然変異などの操作を繰り返しながら解を探索する。適応度は適応度関数によって与えられる。 (wikipediaより) つまり生物が進化してきた仕組みをコンピュータ内でやってみよう！ということだと理解しました。 実際に遺伝的アルゴリズムを用いてフロイド問題を問いてみたので、考える中で詰まったポイントをメモしておきます。完全に自分用です！（笑） 個体それぞれが解であるということランダムに生成された遺伝子をもつ個体がそもそも何なのか？というところでつまずいた。個体は解であると理解しました。例えばフロイド問題を簡単にして1から10までの数を2つのグループAとグループBに分類してみる。各個体は10個の遺伝子を持っている。遺伝子は0か1どちらかの値を取る。0ならグループA、1ならグループBとする。ある個体が[0,1,0,1,0,1,1,1,0,0]のような遺伝子を持っている！これはグループA＝｛1,3,5,9,10｝でグループB＝｛2,4,6,7,8｝というように分けてみる！という解の1つというわけだな！がはは 適応度はどれだけ優秀な解であるか適応度は目的によってそれぞれだ。先程の簡単にしたフロイド問題の例ではグループAとグループBのそれぞれの合計が同じになってほしい！つまりabs|sum(グループA) - sum(グループB)|を小さくしたいわけです。そしてこの値こそが適応度！今回の例ではこの値が小さい個体のほうが優秀！というわけだな！がはは 交叉や突然変異は直感的にわかりやすかった遺伝子がなにを意味しているのか？適応度はなんなのか？というところを抑えると後はかなり直感的に理解できた。もし再び取り組むことがあれば、遺伝子は何を意味しているのか？適応度はなんなのか？を分かればその後は苦しむことは少ないと思う。未来の自分、、、がんばれ！ とても参考になったリンク集 遺伝的アルゴリズム・フロイド問題 【初心者向け】Re:ゼロから始める遺伝的アルゴリズム【人工知能】 GA（遺伝的アルゴリズム）をPythonで実装してみた 遺伝的アルゴリズムについてコードも交えて説明する","link":"/Blog/2022/05/18/Algorithm-2022-05-18-Genetic-Algorithm/"},{"title":"【GitHub】SSHを使えるようにした","text":"SSHとは GitHubでSSHを使ってみる 【詰まったところ】configファイルの作成 SSHとは使ったことはあるが一度ちゃんと調べてみた Secure Shell（セキュア シェル、SSH）は、暗号や認証の技術を利用して、安全にリモートコンピュータと通信するためのプロトコル。パスワードなどの認証部分を含むすべてのネットワーク上の通信が暗号化される。’’’略’’’SSHの暗号通信は、鍵交換アルゴリズム（ディフィー・ヘルマン鍵共有など）を用いて共通鍵暗号で使用するセッション鍵を生成し、共通鍵暗号（トリプルDES、AESなど）を用いて通信を暗号化し、公開鍵暗号（RSAやDSA）を用いてホスト認証やユーザ認証を行なう、いわゆるハイブリッド暗号である。（wikipediaより） なるほど。基礎は大切です。忘れないように！未来の自分！ GitHubでSSHを使ってみるいちいちパスワード（token）を入力するのも面倒だなと思ったのでやってみよう！↓参考になりすぎたリンク Cloud9からGitHubのレポジトリへSSHでpushする手順（エラー解決方法含む） - Qiita Git BashなどでGitを動かしたことがある。 GitHubのレポジトリは作成済。 という方で、 「初めてAWS Cloud9上で開発を始めたため… こちらの記事を見ていただければもうOKです（笑）というくらい分かりやすかった！ 【詰まったところ】configファイルの作成唯一詰まったところはここ。configファイルの中身をそのままコピペするとIdentityFile以下がゴミだよ！と言われます。そこで 1234Host github github.com HostName github.com IdentityFile ~/.ssh/id_rsa User git とすることで一件落着だ！がはは 最近は毎日少しでも新たに取り組んだこと・学んだことをブログにしよう！という意思が強いです（笑）この心の炎が消えないことを祈って・・・","link":"/Blog/2022/05/20/GitHub-2022-05-20-git-ssh/"},{"title":"【Linux】Linuxコマンド","text":"pwd カレントディレクトリのルートディレクトリからのパスが出力 pwd ls カレントディレクトリ配下のファイルやディレクトリを確認 ls 隠しファイル，隠しディレクトリも含める表示 ls -a cd ディレクトリ移動 cd ｛ディレクトリのパス｝ ホームディレクトリへ移動` cd cat ファイルの中身が出力 cat {ファイル名} touch ファイルの作成 touch ｛ファイル名｝ ディレクトリ作成 mkdir ｛ディレクトリ名｝ rm ファイルの削除 rm ｛ファイル名｝ ディレクトリ内を再帰的に削除（ディレクトリごと削除） rm -r {ディレクトリ名}","link":"/Blog/2022/04/24/Linux-2022-04-24-linux-command/"},{"title":"【About ME】自己紹介","text":"なにしてる人？ 趣味 特技 なんのブログ？ アルバイト歴 なにしてる人？ 修士１年（2022年4月現在） 情報工学専攻（コンピュータサイエンス） クラウドコンピューティングを研究 京都の大学に通う大学院生です！2022年4月現在修士1年生で2024年3月卒業予定です。ネットワークの研究室でクラウドコンピューティングの勉強をしてます。 趣味 アウトドア バイク ダイビング（ライセンス有） キャンプ インドア PCゲーム（FPSやRPG） プログラミング Java（大学のJavaの講義でサポート講師をしています） Ruby（Rails，Sinatraでwebサービスの作成・指導をしています） Python（研究でデータ解析やAWSのAPIを叩いたりしています） C言語（ゲームボーイ上で実行可能なゲームを作成しました） React（勉強中です） 特技圧倒的に水泳です！（笑）というのも小中高と地元のスイミングスクールの選手コースでバリバリに泳いでました！水泳歴は20年くらいでしょうか？ なんのブログ？自分のためのブログです!今年は修士1年生になり、もっとコンピュータのことを学びたい！人に教えられるくらい知りたい！という思いがフツフツと湧き上がっております。そんな私の学習録・備忘録です！主に プログラミング アルゴリズム 気になる技術について勉強したことを書く予定です！ アルバイト歴大学4年間はスイミングスクールを２つ掛け持ちしていました。特技の「水泳」からわかるように、水泳漬けの人生でした。その経験もあってスイミングスクールでコーチをしていました。掛け持ちしている一方のスイミングでは全国大会に出場する選手や出場を目指す選手が在籍する選手コースで指導をしていました。他方のスイミングでは子供や成人の方に泳ぎ方を教えていました。","link":"/Blog/2022/04/20/Other-2022-04-20-About-ME/"},{"title":"【メモ】パターン認識","text":"パターン認識観測されたパターンを複数のクラスのうちのどのクラスか決める処理のこと！ここで クラス=概念 ということ． 識別辞書構成法起こりうる全てのパターンを記憶！（理想的な方法） 入力 前処理（ノイズ除去・正規化） 特徴抽出 識別部（識別辞書・識別演算） 出力 特徴抽出特徴は一般にベクトルで表す＝特徴ベクトル特徴ベクトルが張られる空間＝特徴空間 空間上の同一クラスのパターンの塊＝クラスタ どのクラスにも属さないパターンはrejectされる 全パターンそれぞれにクラスを割り振らなければならない-&gt;めちゃくちゃ時間かかる，非現実的起きる全てのパターンを記憶しておくのだから理想的な方法ではあるが，，，時間がかかりすぎて無理！ 最近傍決定則- NN法（nearest neighbor rule）ユークリッド距離を用いる特徴空間上で近いものは似てるでしょ！という仮定","link":"/Blog/2022/04/28/Other-2022-04-28-pattern-recognition/"},{"title":"【デザイン】ロゴ＆デザイン参考サイト","text":"配色 有名ブランドのロゴ フォント 配色デザインをしてみたいけど、なんせセンスがない・・・そんなひとにオススメなサイトがこちら！ Happy Hues - Curated colors in context.See color palette inspiration on a real example website. As you click on differe… なんとも絶妙な色の組み合わせがたくさん掲載されています。使っている色のコードと具体的なWEBページの例が乗っているので参考になりまくり！ 有名ブランドのロゴめちゃくちゃ有名なブランドのロゴをザーッと見られます！そもそもどんなふうにデザインしたらカッコイイんだ？とか有名なブランドロゴを真似することで技術力を高めたいと思う人にオススメなサイト！ The branding style guidelines documents archiveWelcome to the brand design manual documents directory. Search over our worldwid… フォントフォントといえば言わずとしれたGoogle Fontsなどがありますが・・・フォントをみてどれを使おうか決めるのは難しい。そんな人にオススメなサイト！有名ブランドのロゴとそのフォントが見られます。このブランドのフォントかっこいいなぁっていうものがあればここで探してみる！ Font In Logo - Search Engine for Logos and FontsSearch and find FONTS used by World Brands in their logo. Create your logo desig…","link":"/Blog/2022/05/19/Other-2022-05-19-logo-design/"},{"title":"【Python】AOJ「ITP1」をやってみる","text":"何をするのか なぜするのか なぜこの問題を選んだのか どうやるのか 最後に 何をするのか こちらに掲載されているプログラミングの問題40問を解いていきます！ なぜするのか 競技プログラミングに興味が湧いてきたからです！大学の図書館で『問題解決のための「アルゴリズム×数学」が基礎からしっかり身につく本』を読んだことがきっかけです。この本を読んでからプログラミングでロジカルに考えることが楽しい！と再確認しました。 なぜこの問題を選んだのか 競技プログラミングをやってみようと思ったときにあれこれ調べていると、この本の著者である米田氏の記事を発見しました！初心者がまず取り組むこととしてオススメされていたのがAOJ「ITP1」です。 レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】 - Qiitaこんにちは、高校 2 年生の E869120 です。 私は競技プログラミングが趣味で、AtCoder や日本情報オリンピックなどの各種コンテストに出場しておりま… どうやるのか Pythonで取り組みます 競技プログラミングは圧倒的に C++ を利用する方が多いみたいです。では私もC++で！と言いたいところなのですが…使ったことがないのです。 まずは手を動かしてみたい気持ちが強いので個人的に長く利用しているPythonで始めることにしました。 できる限り多様な書き方を考える for文をwhile文に書き換えてみたりなどなど、計算量は現時点ではあまり意識せずに「こんなふうにも書けるかな？」と思ったことを別解としてコメントに残します！これは完全に自己満です（笑） 最後に 学習記録としてGithubにコードを残します。いったい全部解き切るのにどれほどの期間を要するのか想像も付きませんが、コツコツやっていきます！ GitHub - daisuke23bubu/aoj-introduction-programming-1: AOJ「Introduction To Programming I」40問をPythonで解くAOJ「Introduction To Programming I」40問をPythonで解く. Contribute to daisuke23bubu/aoj… 最後までご覧いただきありがとうございました！","link":"/Blog/2022/05/31/Python-2022-05-31-aoj-itp1/"},{"title":"【Python】リスト内包表記の速度","text":"結論 はじめに 実験と結果 なぜ早いのか 参考 結論さっそく結論から言うと、リスト内包表記は早い。なるほど、リスト内包表記使いこなせるようになろう… はじめにはじめじゃないですが…（笑） 前回の投稿からAOJ「ITP 1」を少しずつ解いています。現在は折返しを超えて、40問中24問解き終わりました！ GitHub - daisuke23bubu/aoj-introduction-programming-1: AOJ「Introduction To Programming I」40問をPythonで解くAOJ「Introduction To Programming I」40問をPythonで解く. Contribute to daisuke23bubu/aoj… ここまで実行速度は意識せずに解いてきたのですが、リストを使っているうちにリスト内包表記ってスタイリッシュやけど、これ見た目以外に使うメリットあるのか？早いのか？と疑問に思ったので調べてみました。今回参考にしたサイトはこちらです。 実験と結果参考にした記事内ではこの3つの場合で実験をされていました。 testfunc1: 空リストを用意してappendtestfunc2: testfunc1 + appendをオブジェクト化testfunc3: リスト内包表記 結果は以下のようになったようです 1.73 s 1.08 s 697 ms ちなみにここでは10,000,000個の整数からなるリストを用いていました。ほへーリスト内容表記が早いんですねぇ。私は普段testfunc1で書くことが多いです。というよりもリスト内包表記に慣れていないというのがあります。 また、testfunc2の表記が見慣れないものだったので自分用にメモしておきます。 testfunc2: testfunc1 + appendをオブジェクト化 12345def testfunc2(rangelist): //rangelistは10,000,000個の整数のリスト templist = [] append = templist.append for temp in rangelist: append(temp) appendをオブジェクトにしてfor文内でappend(temp)で配列にappendする。この書き方でappendできるですねぇ。勉強になります。未来の自分よく覚えておくように！ なぜ早いのか ここまで来るとなぜ早いのかというところが気になります。ざっくりまとめると、『リスト内包表記では内部で呼び出される処理がリストに特化したものであるから。』です！簡単すぎる説明ですが詳細がまた気になったらまた調べなさい！未来の自分！ 参考Pythonのリスト内包表記の速度 - Qiita リスト内包表記は速いのか Python 2.6.6にて、10,000,000個の整数をappendするのに、以下の1,2,3の方法の実行時間を比較しました…","link":"/Blog/2022/06/05/Python-2022-06-05-python-lst/"},{"title":"【Python】AOJ「ITP1」を振り返り","text":"振り返り 1-C 2-B 2-C 3-B 4-A 4-C 5-B 6-A 6-B 6-C 8-A 8-B 8-C 8-D 9-A 9-B 9-D 10-B 10-D 完走＆感想 振り返り長らく取り組んでいたAOJ「ITP1」の40問を解き終えました〜笑解きっぱなしは良くないと思ったので個人的に「ほぇ〜なるほどぉ」と感じたポイントを復習しておきます！問題番号とともに考え方やコーディングのtipsを未来の自分のためにまとめます！ GitHub - daisuke23bubu/aoj-introduction-programming-1: AOJ「Introduction To Programming I」40問をPythonで解くAOJ「Introduction To Programming I」40問をPythonで解く. Contribute to daisuke23bubu/aoj… 1-C1a,b = map(int,input().split()) map関数の使い方です。map関数はmap(関数, イテラブルオブジェクト)という感じで書きます。イテラブルオブジェクトと聞いたら難しい感じがするけれど繰り返し要素を取り出せるもの。for文とかで使うやつ（listとかstrとか）。 2-B 1if a &lt; b &lt; c: Pythonは3つの比較が上記のように書ける。a &lt; b and b &lt; c を楽に書けるなぁ 2-C1input_array = list(map(int, input().split())) 整数の入力をspaceで区切ってlistにするところまで一気にやってしまう。 3-B12345while True: x = int(input()) if x == 0: break ... 入力のデータが繰り返し与えられるときはwhile Trueとして入力を受け取る。ループを抜ける条件もお忘れなく。 4-A1print(f'{a/b:.5f}') floatの小数点以下の表示する桁数をしてする方法。{float}:.{桁数}f}とする。 4-Cswitch文で解こうとしましたが、Pythonにswitch文はありません。 5-B1print(&quot;#&quot;, end=&quot;&quot;) end=&quot;&quot;とすることで出力後に改行が入ることなく連続で表示できる。 6-A12num_lst.reverse()print(*num_lst) list.reverse()でリストを逆順にできる。リストの要素のみを表示したいときはprint(*list)で可能。 6-B1all_cards = [(s, n) for s in ['S', 'H', 'C', 'D'] for n in range(1, 14)] リスト内包表記です。上記の例ではトランプを作っています。S・H・C・Dの４つに対してそれぞれ1から13までの値を取ります。[S,1][S,2]…[C,1]…[D,13]という感じ。 6-C1all_rooms = [[[0 for i in range(10)]for j in range(3)]for k in range(4)] またまたリスト内包表記です。この問題では1フロア10部屋，3階建ての校舎が4つという設定です。各部屋の人数を管理するという感じ。リスト内包表記を使いこなせるようになりたい。 8-A1234str.swapcase()chr.islower()chr.isupper() swapcaseは大文字小文字の交換です。islower()で小文字の判定、isupper()で大文字の判定が可能。 8-B1234ans = 0 for n in str_x: ans += int(n) print(ans) 入力された数の各桁の和を求める問題。入力を文字列として扱うと上記のように書ける。 8-C1234ord(ch) - ord('a')chr(ord('a')+i) ord()でunicodeが取得できる。またaのようなある基準が存在するときは上記のように書くとスマート。 8-D12s = input()s += s 文字列sが画像のようにリング状になっているとき、プログラム上でどう表現するのか？という発想。 9-A1str.lower().split().count(word) str内に含まれるwordをカウントできる。 9-B12previous = list[:h]following = list[h:] リストをスライスできる。list[:h]とするとlistの0番目からh-1番目まで取得可能。 9-D1234order = input().split()a,b = map(int,order[1:3])---------------------------------list[::-1] 先程のスライスをうまく使うことで入力の一部を持ってくることができる。またスライスは[{開始位置}:{終了位置}:{ステップ}]を指定できる。そのためlist[::-1]とするとリストが逆順になる。 10-B1print(S, L, h, sep=&quot;\\n&quot;) sep=&quot;\\n&quot;とすることで表示する変数それぞれの後ろに改行が入る。 10-D12345index = [1, 2, 3]names = [&quot;ichiro&quot;, &quot;jiro&quot;, &quot;saburo&quot;]for i, name in zip(index, names): print(i, name) zip関数は複数のリストから要素を取り出せる。 完走＆感想個人的に復習しなければならない！という箇所を抜粋して記載してみました！Pythonの基本的なところが網羅されていてよい勉強になりました。チャンスがあれば競プロにも参加してみよう！ そして問題を解き進めるにあたって下記リンクがとても参考になりました。筆者さんに感謝いたします。 AOJ 「ITP I」40問をpythonで解いてみた | TysonBlog本記事では「レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】」で紹介されているAOJの「Introduction T…","link":"/Blog/2022/07/11/Python-2022-07-11-aoj-itp1-review/"},{"title":"【Ruby】Ruby文法","text":"インターンでRubyを使うので基本的なコマンドの復習 Rubyファイルの実行1ruby {ファイル名} 標準出力12puts &quot;hoge&quot;puts hoge 変数定義型宣言は不要 1name = 'hoge' 文字列12345678name = 'hoge'name = &quot;hoge&quot;&quot;&quot;(ダブルクォートでは式が展開できる)name = 'hoge'puts 'hello #{name}'&gt; hello #{name}puts &quot;hello #{name}&quot;&gt; hello hoge 数値1234整数number = 1少数number = 1.0 型変換12345678puts &quot;3&quot; + 4&gt; TypeErrorputs &quot;3&quot;.to_i + 4&gt; 7to_ito_fto_s 配列123456animals = [&quot;dog&quot;, &quot;cat&quot;]puts animals[1]&gt; catanimals.push(&quot;mouse&quot;)animals &lt;&lt; &quot;pig&quot; ハッシュ123456colors = {green: &quot;緑&quot;, red: &quot;赤&quot;}puts colors[:green]&gt; 緑colors[:blue] = &quot;青&quot;colors.delete(:red) ループ1234567891011121314#while文while x &gt;= 1 puts x x = x -1end#for文for i in 1..4 do puts iendanimals.each do |animal| puts animalend 条件分岐1234567891011121314#if文x = 4if x == 0 puts 'zero'elsif x%2 == 0 puts 'even'end#unlessunless x == 0 puts 'non zero'else puts 'zero'end 命名規則12345678#クラス，モジュールUpperCamelCase#メソッド，変数snake_case#定数SNAKE_WITH_UPPERCASE","link":"/Blog/2022/04/25/Ruby-2022-04-25-Ruby-Command/"},{"title":"【Ruby】Sinatra MVC","text":"Controllerルーティングを設定するところ！ 123456789#getは以下のような感じget '/' doend#postは以下のような感じpost '/' doend Viewserb = htmlにRubyを埋め込んだファイルerbファイルにhtmlやrubyを書くよ 12345&lt;% %&gt;&gt;結果は表示されない&lt;%= %&gt;&gt;結果が表示される 変数の受け渡しControllerからViewsへ変数の架け橋@がつく変数はインスタンス変数となるインスタンス変数は スコープがテンプレート内 リクエストごとにリクエストインスタンスが立つ FormとInputForm actionは送信先 methodはリクエストの種類Input typeは値の種類（テキストボックス，ラジオボタンなど) nameは値の名前12345678910#クライアント側（Views）&lt;form action=&quot;/create&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;#サーバ側（Controller）post '/create' do Item.create({ title = params[:title] price = params[:price] }) paramsはリクエストに入っている情報。つまりinput name=&quot;hoge&quot; と params[:hoge]のhogeの部分が一致していればformからControllerへ情報が送れる！","link":"/Blog/2022/04/30/Ruby-2022-04-30-Sinatra-MVC/"},{"title":"【Ruby】Sinatra振り返り","text":"Rubyにおけるオブジェクト指向 サーバ・クライアントモデル Sinatraにおけるparams Sinatra DBにおけるdb:migrate Rubyにおけるオブジェクト指向 関連性のあるデータや処理をひとまとめにする＝オブジェクト オブジェクトが互いに通信してソフトウェアを構築するプログラミングパラダイム Rubyにおいては全てがオブジェクト サーバ・クライアントモデル サーバとクライアントがインターネットを通じて互いにやりとりすること Ex.Webアプリケーションサーバがサーバ，ブラウザがクライアント HTTP・HTTPSプロトコルが用いられる Sinatraにおけるparams ハッシュ URIのパラメーター、クエリ、ボディーのデータを保持 form 内の nameタグと対応してデータを保持 Sinatra DBにおけるdb:migrate DBに対する操作を記述 一度実行したら編集しても反映されない schema.rbには現在のDBの状態が表示","link":"/Blog/2022/05/15/Ruby-2022-05-15-Sinatra-review/"},{"title":"【Ruby】Sinatraのあれこれ","text":"データベース関連のコマンド psql migrationファイル modelファイル データベース関連のコマンド1234567891011# データベース削除rake db:drop# データベース作成rake db:create# データベース削除してschemaをもとにデータベース再生成rake db:reset# データベース削除→作成→migrateまで行うrake db:migrate:reset 現状はデータベース関連のエラーが出たら一度migrate:resetすることで解決することが多い。しかし！とりあえず使っとくみたいな発想は好きじゃない。データベースについて詳しくなりたい！ psqlデータベースを覗いてみよう！そんなときにpsql。ここでは利用したコマンドだけメモしておきます。 1234567891011//postgresコマンドの実行psql {データベース名}// テーブル一覧\\dt;//特定のテーブル内のデータ一覧select * from {テーブル名};//postgres終了\\q migrationファイルここでは記法例を示しますよ！カラムの定義どうするんだっけ？となったのでメモ。 12345678910class CreateContributions &lt; ActiveRecord::Migration[6.1] def change create_table :contributions do |t| t.string :name #string型のカラムを定義 t.integer :number #int型のカラムを定義 t.integer :count, :default =&gt; 0 #デフォルトを0に設定 t.timestamps null: false end endend modelファイル1対多の関係の定義の仕方！ 1234567Class Contribution &lt; ActiveRecord::Base has_many :commentsendClass comment &lt; ActiveRecord::Base belongs_to :contributionend 上記の記入例ではContibution:Comment=1:nとなっている。has_many :{複数形}とbelongs_to :{単数形}になっているから一目瞭然だ！","link":"/Blog/2022/06/10/Ruby-2022-06-10-sinatra-remind/"},{"title":"【Apache】Apacheを学ぶ","text":"なぜ学ぶのか 勉強になるリンク Apacheについて 基本設定 DocumentRoot なぜ学ぶのか先日EC2にAPIサーバを構築する機会がありまして、その際にApacheについてぼやっとしているところが多いなぁと感じたからです。自分なりに調べて分かったことをまとめます！ 勉強になるリンク Let’s プログラミング WEB ARCH LABO せお丸のプログラマー養成講座 著者の皆様に感謝いたします！とても勉強になりました！ Apacheについて基本設定httpd.confと.htaccessで設定する。 httpd.conf Apacheの基本設定。DocumentRoot、ポート番号やリダイレクトなど。まずここで最初に設定を行うとイメージ。おおもとの設定。 .htaccess ディレクトリごとにで設定する。設定できることはhttpd.confと比較すると少ない。 DocumentRootリクエストがあった際にDocumentRootで指定されているディレクトリからファイルを探しにいく。 例えばDocumentRootが/var/www/htmlと設定されているとしよう。http:localhost:80/index.htmlのリクエストがあるとサーバ内の/var/www/html/index.htmlを探しにいくというイメージ。もしhttp:localhost:80/2/index.htmlこのようなリクエストが来たら/var/www/html/2/index.htmlを探しにいく！という感じ。","link":"/Blog/2022/07/30/Linux-2022-07-30-Apache-study/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","link":"/Blog/tags/Algorithm/"},{"name":"GitHub","slug":"GitHub","link":"/Blog/tags/GitHub/"},{"name":"Command","slug":"Command","link":"/Blog/tags/Command/"},{"name":"Linux","slug":"Linux","link":"/Blog/tags/Linux/"},{"name":"myself","slug":"myself","link":"/Blog/tags/myself/"},{"name":"Python","slug":"Python","link":"/Blog/tags/Python/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/tags/Ruby/"},{"name":"Sinatra","slug":"Sinatra","link":"/Blog/tags/Sinatra/"},{"name":"Apache","slug":"Apache","link":"/Blog/tags/Apache/"}],"categories":[{"name":"Algorithm","slug":"Algorithm","link":"/Blog/categories/Algorithm/"},{"name":"GitHub","slug":"GitHub","link":"/Blog/categories/GitHub/"},{"name":"Linux","slug":"Linux","link":"/Blog/categories/Linux/"},{"name":"Other","slug":"Other","link":"/Blog/categories/Other/"},{"name":"Python","slug":"Python","link":"/Blog/categories/Python/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/categories/Ruby/"}]}