{"pages":[],"posts":[{"title":"About ME","text":"なにしてる人？ 修士１年（2022年4月現在） 情報工学専攻（コンピュータサイエンス！） クラウドコンピューティングを研究 京都の大学に通う大学院生です！2022年4月現在修士1年生です。専攻は情報です！ネットワークの研究室所でクラウドの勉強をしてます。 趣味 アウトドア バイク ダイビング キャンプ インドア PCゲーム（FPSやRPG） プログラミング（Railsでwebサービスを作ったり！） 特技圧倒的に水泳です！（笑）というのも小中高と地元のスイミングスクールの選手コースでバリバリに泳いでました！水泳歴は20年くらいでしょうか？ なんのブログ？自分のためのブログです（笑）今年は修士1年生になり、もっとコンピュータのことを学びたい！人に教えられるくらい知りたい！という思いがフツフツと湧き上がっております（笑）そんな私の学習録・備忘録です！ アルバイト歴大学4年間はスイミングスクールを２つ掛け持ちしていました。特技の「水泳」からわかるように、水泳漬けの人生でした。その経験もあってスイミングスクールでコーチをしていました。掛け持ちしている一方では選手コースで指導をして、他方では子供や成人の方に泳ぎ方を教えていました。","link":"/Blog/2022/04/20/About-ME/"},{"title":"Linuxコマンド","text":"pwd カレントディレクトリのルートディレクトリからのパスが出力 pwd ls カレントディレクトリ配下のファイルやディレクトリを確認 ls 隠しファイル，隠しディレクトリも含める表示 ls -a cd ディレクトリ移動 cd ｛ディレクトリのパス｝ ホームディレクトリへ移動` cd cat ファイルの中身が出力 cat {ファイル名} touch ファイルの作成 touch ｛ファイル名｝ ディレクトリ作成 mkdir ｛ディレクトリ名｝ rm ファイルの削除 rm ｛ファイル名｝ ディレクトリ内を再帰的に削除（ディレクトリごと削除） rm -r {ディレクトリ名}","link":"/Blog/2022/04/24/linux-command/"},{"title":"Ruby文法","text":"インターンでRubyを使うので基本的なコマンドの復習 Rubyファイルの実行1ruby {ファイル名} 標準出力12puts &quot;hoge&quot;puts hoge 変数定義型宣言は不要 1name = 'hoge' 文字列12345678name = 'hoge'name = &quot;hoge&quot;&quot;&quot;(ダブルクォートでは式が展開できる)name = 'hoge'puts 'hello #{name}'&gt; hello #{name}puts &quot;hello #{name}&quot;&gt; hello hoge 数値1234整数number = 1少数number = 1.0 型変換12345678puts &quot;3&quot; + 4&gt; TypeErrorputs &quot;3&quot;.to_i + 4&gt; 7to_ito_fto_s 配列123456animals = [&quot;dog&quot;, &quot;cat&quot;]puts animals[1]&gt; catanimals.push(&quot;mouse&quot;)animals &lt;&lt; &quot;pig&quot; ハッシュ123456colors = {green: &quot;緑&quot;, red: &quot;赤&quot;}puts colors[:green]&gt; 緑colors[:blue] = &quot;青&quot;colors.delete(:red) ループ1234567891011121314#while文while x &gt;= 1 puts x x = x -1end#for文for i in 1..4 do puts iendanimals.each do |animal| puts animalend 条件分岐1234567891011121314#if文x = 4if x == 0 puts 'zero'elsif x%2 == 0 puts 'even'end#unlessunless x == 0 puts 'non zero'else puts 'zero'end 命名規則12345678#クラス，モジュールUpperCamelCase#メソッド，変数snake_case#定数SNAKE_WITH_UPPERCASE","link":"/Blog/2022/04/25/Ruby-Command/"},{"title":"パターン認識","text":"パターン認識観測されたパターンを複数のクラスのうちのどのクラスか決める処理のこと！ここで クラス=概念 ということ． 識別辞書構成法起こりうる全てのパターンを記憶！（理想的な方法） 入力 前処理（ノイズ除去・正規化） 特徴抽出 識別部（識別辞書・識別演算） 出力 特徴抽出特徴は一般にベクトルで表す＝特徴ベクトル特徴ベクトルが張られる空間＝特徴空間 空間上の同一クラスのパターンの塊＝クラスタ どのクラスにも属さないパターンはrejectされる 全パターンそれぞれにクラスを割り振らなければならない-&gt;めちゃくちゃ時間かかる，非現実的起きる全てのパターンを記憶しておくのだから理想的な方法ではあるが，，，時間がかかりすぎて無理！ 最近傍決定則- NN法（nearest neighbor rule）ユークリッド距離を用いる特徴空間上で近いものは似てるでしょ！という仮定","link":"/Blog/2022/04/28/pattern-recognition/"},{"title":"Sinatra MVC","text":"Controllerルーティングを設定するところ！ 123456789#getは以下のような感じget '/' doend#postは以下のような感じpost '/' doend Viewserb = htmlにRubyを埋め込んだファイルerbファイルにhtmlやrubyを書くよ 12345&lt;% %&gt;&gt;結果は表示されない&lt;%= %&gt;&gt;結果が表示される 変数の受け渡しControllerからViewsへ変数の架け橋@がつく変数はインスタンス変数となるインスタンス変数は スコープがテンプレート内 リクエストごとにリクエストインスタンスが立つ FormとInputForm actionは送信先 methodはリクエストの種類Input typeは値の種類（テキストボックス，ラジオボタンなど) nameは値の名前12345678910#クライアント側（Views）&lt;form action=&quot;/create&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;#サーバ側（Controller）post '/create' do Item.create({ title = params[:title] price = params[:price] }) paramsはリクエストに入っている情報。つまりinput name=&quot;hoge&quot; と params[:hoge]のhogeの部分が一致していればformからControllerへ情報が送れる！","link":"/Blog/2022/04/30/Sinatra-MVC/"},{"title":"Sinatra review","text":"Rubyにおけるオブジェクト指向 関連性のあるデータや処理をひとまとめにする＝オブジェクト オブジェクトが互いに通信してソフトウェアを構築するプログラミングパラダイム Rubyにおいては全てがオブジェクト サーバ・クライアントモデル サーバとクライアントがインターネットを通じて互いにやりとりすること Ex.Webアプリケーションサーバがサーバ，ブラウザがクライアント HTTP・HTTPSプロトコルが用いられる Sinatraにおけるparams ハッシュ URIのパラメーター、クエリ、ボディーのデータを保持 form 内の nameタグと対応してデータを保持 Sinatra DBにおけるdb:migrate DBに対する操作を記述 一度実行したら編集しても反映されない schema.rbには現在のDBの状態が表示","link":"/Blog/2022/05/15/Sinatra-review/"},{"title":"first post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post``` bash$ hexo new “My New Post”``` More info: Writing Run server``` bash$ hexo server``` More info: Server Generate static files``` bash$ hexo generate``` More info: Generating Deploy to remote sites``` bash$ hexo deploy``` More info: Deployment","link":"/Blog/2022/05/15/first-post/"}],"tags":[{"name":"myself","slug":"myself","link":"/Blog/tags/myself/"},{"name":"Linux","slug":"Linux","link":"/Blog/tags/Linux/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/tags/Ruby/"},{"name":"パターン認識","slug":"パターン認識","link":"/Blog/tags/%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E8%AA%8D%E8%AD%98/"},{"name":"Sinatra","slug":"Sinatra","link":"/Blog/tags/Sinatra/"},{"name":"hello world","slug":"hello-world","link":"/Blog/tags/hello-world/"}],"categories":[{"name":"myself","slug":"myself","link":"/Blog/categories/myself/"},{"name":"Linux","slug":"Linux","link":"/Blog/categories/Linux/"},{"name":"Ruby","slug":"Ruby","link":"/Blog/categories/Ruby/"},{"name":"パターン認識","slug":"パターン認識","link":"/Blog/categories/%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E8%AA%8D%E8%AD%98/"},{"name":"hello world","slug":"hello-world","link":"/Blog/categories/hello-world/"}]}